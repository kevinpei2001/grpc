# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import token_pb2 as token__pb2


class TokensStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.lookupToken = channel.unary_unary(
                '/tokens.Tokens/lookupToken',
                request_serializer=token__pb2.lookuptokenRequest.SerializeToString,
                response_deserializer=token__pb2.tokenResponse.FromString,
                )
        self.createToken = channel.unary_unary(
                '/tokens.Tokens/createToken',
                request_serializer=token__pb2.createtokenRequest.SerializeToString,
                response_deserializer=token__pb2.tokenResponse.FromString,
                )
        self.renewToken = channel.unary_unary(
                '/tokens.Tokens/renewToken',
                request_serializer=token__pb2.renewtokenRequest.SerializeToString,
                response_deserializer=token__pb2.tokenResponse.FromString,
                )
        self.revokeToken = channel.unary_unary(
                '/tokens.Tokens/revokeToken',
                request_serializer=token__pb2.revoketokenRequest.SerializeToString,
                response_deserializer=token__pb2.revokeResponse.FromString,
                )


class TokensServicer(object):
    """Missing associated documentation comment in .proto file."""

    def lookupToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renewToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def revokeToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokensServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'lookupToken': grpc.unary_unary_rpc_method_handler(
                    servicer.lookupToken,
                    request_deserializer=token__pb2.lookuptokenRequest.FromString,
                    response_serializer=token__pb2.tokenResponse.SerializeToString,
            ),
            'createToken': grpc.unary_unary_rpc_method_handler(
                    servicer.createToken,
                    request_deserializer=token__pb2.createtokenRequest.FromString,
                    response_serializer=token__pb2.tokenResponse.SerializeToString,
            ),
            'renewToken': grpc.unary_unary_rpc_method_handler(
                    servicer.renewToken,
                    request_deserializer=token__pb2.renewtokenRequest.FromString,
                    response_serializer=token__pb2.tokenResponse.SerializeToString,
            ),
            'revokeToken': grpc.unary_unary_rpc_method_handler(
                    servicer.revokeToken,
                    request_deserializer=token__pb2.revoketokenRequest.FromString,
                    response_serializer=token__pb2.revokeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tokens.Tokens', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tokens(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def lookupToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokens.Tokens/lookupToken',
            token__pb2.lookuptokenRequest.SerializeToString,
            token__pb2.tokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokens.Tokens/createToken',
            token__pb2.createtokenRequest.SerializeToString,
            token__pb2.tokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def renewToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokens.Tokens/renewToken',
            token__pb2.renewtokenRequest.SerializeToString,
            token__pb2.tokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def revokeToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokens.Tokens/revokeToken',
            token__pb2.revoketokenRequest.SerializeToString,
            token__pb2.revokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
